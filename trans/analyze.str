module analyze

imports
  libstratego-lib
  include/MoBL
  lib/editor-common
  declare
  lookup
  type
  rename
  normalize
  desugar
  mobl
  resolve
  generation/compile

rules

  // Analysis: does a topdown traversal of the tree,
  // and try to apply the record-entity rule.
  analyze =
    (?Module(qid, def*) <+ ?Application(qid, _, def*))
    ; {| ModuleName, Imports
       : rules ( ModuleName := qid )
       ; import-all
       ; normalize-all
       ; alltd(add-tl-namespace)
       ; declare-all
       ; rename-all
       ; add-namespace-all
       ; declare-all
       ; rename-all
       ; add-namespace-all
       //; declare-all
       //; rename-all
         //; debug
       |}

  import-all =
    alltd(import-module)

  import-module =
    ?Import(qid)
    ; where(<open-import(\ path -> <resolve-file> <concat-strings> [path, ".mobl"] \, parse-file, compile-and-externalize-module)> <qid-to-path> qid
            ; <declare-all> Module(qid, <id>))
    ; rules ( Imports :+= qid )

  lookup-import-module =
    ?Import(qid)
    ; where(<open-import(\ path -> <resolve-file> <concat-strings> [path, ".mobl"] \, parse-file, externalize-module)> <qid-to-path> qid
            ; <declare-all> Module(qid, <id>))

  compile-and-externalize-module :
    mod@Module(qid, def*) -> def2*
    with compile
       ; def2* := <externalize-module> mod

  externalize-module :
    Module(qid, def*) -> def2*
    with def2* := <analyze; desugar-all; ?Module(_, <id>); filter(definition-to-external)>

  compile-and-externalize-module :
    app@Application(qid, _, def*) -> def2*
    with compile
       ; def2* := <externalize-module> app

  externalize-module :
    Application(qid, _, def*) -> def2*
    with def2* := <analyze; desugar-all; ?Application(_, _, <id>); filter(definition-to-external)>

