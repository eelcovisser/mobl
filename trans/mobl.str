module mobl

/**
 * This module mostly imports all other modules and deals with the IDE
 * side of things
 */

imports
  libstratego-lib
  libstratego-gpp
  libstratego-aterm
  include/MoBL
  lib/editor-common
  check
  generation/compile
  generation/emit
  generation/compile
  normalize
  lookup
  resolve
  analyze
  type
  desugar
  pp
  sync-analysis

strategies

  resolve-file :
    filename -> filename
    where <file-exists> filename

  resolve-file :
    filename -> path
    where not(<file-exists> filename)
        ; [path] := <filter(\ p -> <concat-strings> [p, "/", filename] \; file-exists)> <IncludePaths>

rules // Main editor interface (defined by editor/MoBL-Builders and -References.esv)

  // Analyzes the current program, returning a tuple with errors, warnings, and notes;
  // each a list of (term, message) tuples or simply (message) terms.
  editor-analyze:
    (ast, path, project-path) -> (errors, warnings, notes)
    with
      // Ensure all dynamic rules are properly scoped
      try(dr-scope-all-end)
      ; dr-scope-all-start
    with
      rules ( ProjectPath := project-path
              IsImported  : path
              OutputPath  := <concat-strings> [project-path, "/www"]
              IncludePaths := [project-path, <concat-strings> [project-path, "/stdlib"]])
      ; ast2 := <analyze; store-result> ast
      ; (Module(mod-name, _) := ast2 <+ Application(mod-name, _, _) := ast2)
      ; rules ( CompilingModule := mod-name )
      ; errors   := <collect-all(constraint-error, conc)> ast2
      ; if not([] := errors) then
          rules ( HasErrors := True() )
        end
      ; warnings := <collect-all(constraint-warning, conc)> ast2
      ; notes    := <collect-all(constraint-note, conc)> ast2

  // Prints the abstract syntax ATerm of a selection.
  generate-aterm:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"aterm")> path;
      result   := selected // we just return the input term

  // Resolves a reference when the user control-clicks or presses F3 in the editor.
  // Only succeeds for nodes of the form Type(_) for which GetEntity is defined.
  editor-resolve:
    (node, position, ast, path, project-path) -> target
    where
      //<debug(!"Resolve: ")> node;
      target     := <lookup-type> node

  generate-artifacts:
    (selected, position, ast, path, project-path) -> None() //(filename-html, result-html)
    where not(HasErrors)
    with
      // Ensure all dynamic rules are properly scoped
      try(dr-scope-all-end)
      ; dr-scope-all-start
    with
      rules ( ProjectPath     := project-path
              CachedParseAst  : path -> ast
              OutputPath      := <concat-strings> [project-path, "/www"]
              IncludePaths    := [project-path, <concat-strings> [project-path, "/stdlib"]])
      ; (Module(mod-name, _)  := ast <+ Application(mod-name, _, _) := ast)
      ; rules ( CompilingModule := mod-name )
      ; <compile> ast

  generate-artifacts:
    _ -> None() //(filename-html, result-html)
    where HasErrors



  editor-hover:
    (t@SimpleType(_), position, ast, path, project-path) -> <get-doc> <lookup-type> t2
    where t2 := <lookup-node> (position, ast)

  editor-hover:
    (t@GenericType(_, _), position, ast, path, project-path) -> <get-doc> <lookup-type> t2
    where t2 := <lookup-node> (position, ast)

  editor-hover:
    (e@Var(x), position, ast, path, project-path) -> $[Variable '[x]' has type [<type-of; write-to-string> e2]]
    where e2 := <lookup-node> (position, ast)
        ; debug

  editor-hover:
    (c@Call(_, _), position, ast, path, project-path) -> <get-doc> <lookup-function> qid
    where Call(qid, _) := <lookup-node> (position, ast)

  editor-hover:
    (f@FieldAccess(_, _), position, ast, path, project-path) -> <get-doc> <lookup-property; debug> (<type-of> e, x)
    where FieldAccess(e, x) := <lookup-node> (position, ast)

  editor-hover:
    (c@MethodCall(_, _, _), position, ast, path, project-path) -> <get-doc> <lookup-method> (<type-of> e, x)
    where MethodCall(e, x, _) := <lookup-node> (position, ast)

  editor-hover:
    (target, position, ast, path, project-path) -> $[Hover help: [<write-to-string> t2]]
    where t2 := <lookup-node> (position, ast)


  editor-complete =
    debug(!"Editor complete: "); fail

  // Completes an identifier when the user presses control-space
  // (the completion identifier in the AST provides additional context information)
  editor-complete:
    (SimpleType(COMPLETION(prefix)), position, ast, path, project-path) ->
    proposals
    where
      all-types := <get-all-types>;
      proposals    := <map(type-name-to-proposal)> all-types

  editor-complete:
    (FieldAccess(_, COMPLETION(prefix)), position, ast, path, project-path) -> [prop*, method*]
    where ast' := <analyze; store-result> ast
        ; position' := <desugar-position(normalize|ast); debug(!"New position: ")> position
    where FieldAccess(e, _) := <term-at-position(|position'); debug(!"Term at position: ")> ast
       <+ FieldAccess(e, _) := <parent-at-position(|position'); debug(!"Term at parent: ")> ast
    where t := <debug(!"e: "); type-of; debug(!"Type: ")> e
        ; prop* := <get-all-properties; map(\ prop@Property(_, x, _, _) -> ([x], <get-doc> prop) \)> t
        ; method* := <get-all-methods; map(\ meth@c#([_, x, args|_]) -> (<concat> [[x, "("], <filter(?FArg(<id>, _)); separate-by(!", ")> args, [")"]], <get-doc> meth) \)> t

  editor-complete:
    (MethodCall(_, COMPLETION(prefix), _), position, ast, path, project-path) -> method*
    where MethodCall(e, _, _) := <lookup-node> (position, ast)
        ; t := <type-of> e
        ; method* := <get-all-methods; map(\ meth@c#([_, x|_]) -> ([x], <get-doc> meth) \)> t

  type-name-to-proposal:
    x -> ([x], "")

  editor-desugar :
    (selected, position, ast, path, project-path) -> (filename, <desugar-all; analyze-sync; pp-mobl> <ResultingAST>)
    with
      filename := <guarantee-extension(|"mobl")> "desugared"

  format-code :
    (selected, position, ast, path, project-path) -> (filename, <pp-mobl> selected)
    with
      filename := <guarantee-extension(|"mobl")> "formatted"

strategies

  get-doc =
       one(?manno*)
       ; <one(?DocAnno(doc))> manno*
       ; <un-double-quote> doc
    <+ !""

  store-result =
    ?t
    ; rules ( ResultingAST := t )


  lookup-node :
    (path, ast) -> <find-node; debug> (<desugar-position(normalize|ast)> path, <ResultingAST>)

  find-node :
    ([], t) -> t

  find-node :
    ([a|k], c#(ts)) -> <find-node> (k, <at-index(?result); !result> (a, ts))

