module type

imports
  include/MoBL
  rename
  lookup

strategies

  type-of = eq-type-of <+ ?Var(<id>); TypeOf

  eq-type-of :
    Int(_) -> SimpleType(QId("mobl", "Int"))

  eq-type-of :
    String(_) -> SimpleType(QId("mobl", "String"))

  eq-type-of :
    True() -> SimpleType(QId("mobl", "Bool"))

  eq-type-of :
    False() -> SimpleType(QId("mobl", "Bool"))

  eq-type-of :
    Null() -> SimpleType(QId("mobl", "Object"))

  eq-type-of :
    Callback(_) -> SimpleType(QId("mobl", "Callback"))

  eq-type-of : // TODO: what about null?
    Choice(e, e1, e2) -> <type-of> e1

  eq-type-of :
    Brackets(e) -> <type-of> e

  eq-type-of :
    AnonymousTemplate(_) -> SimpleType(QId("mobl", "Template"))

  eq-type-of :
    Tuple(fst, rest*) -> GenericType(QId("mobl", $[Tuple[n]]), t*)
    where n := <add> (1, <length> rest*)
        ; t* := <map(type-of)> [fst|rest*]

  eq-type-of :
    List([e|_]) -> GenericType(QId("mobl", "List"), [t])
    where t := <type-of> e

  eq-type-of :
    CollectionCons(qid, t*, e*) -> GenericType(qid, t*)

  eq-type-of :
    Call(qid, e*) -> rt
    where c#([_, _, _, rt]) := <lookup-function> qid

  eq-type-of :
    Call(qid, e*) -> rt
    where ExternalScreen(_, _, _, rt) := <lookup-screen> qid

  eq-type-of :
    Call(qid, e*) -> rt
    where rt@SimpleType(QId("mobl", "Callback")) := <type-of> Var(qid)

  eq-type-of :
    EntityCons(t, _) -> t

  eq-type-of :
    Var(qid) -> GenericType("Type", [SimpleType(qid)])
    where <lookup-type> SimpleType(qid)

  eq-type-of :
    Var(qid) -> <fargs-to-template-type> farg*
    where ExternalTemplate(_, _, farg*) := <lookup-template-aux> qid

  fargs-to-template-type :
    farg* -> GenericType(QId("mobl", $[Template[n]]), t*)
    where t* := <filter(?FArg(_, <id>))> farg*
        ; n := <length> t*

  eq-type-of :
    MethodCall(e, x, e*) -> rt
    where m := <lookup-method> (<type-of> e, x)
        ; (   ExternalMethod(_, _, _, rt) := m
           <+ ExternalSyncMethod(_, _, _, rt) := m)

  eq-type-of :
    FieldAccess(e, x) -> t
    where Property(_, _, t, _) := <lookup-property> (<type-of> e, x)

  eq-type-of :
    BinMethodCall(e1, op, e2) -> <type-of> e1 // @TODO: Fix this

strategies

  type-compatible =
    ?(t, t)

  type-compatible =
    ?(t1, t2)