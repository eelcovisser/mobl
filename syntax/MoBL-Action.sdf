module MoBL-Action

imports
  Common
  MoBL-UI

exports

  context-free syntax %% Logic

    MetaAnno* "function" QId "(" {FArg ","}* ")" ":" Type "{" Statement* "}" -> FunctionDef {cons("Function")}
    MetaAnno* "function" QId "(" {FArg ","}* ")" "{" Statement* "}" -> FunctionDef {cons("FunctionNoReturnType")}
    MetaAnno* "sync" "function" QId "(" {FArg ","}* ")" ":" Type "{" Statement* "}" -> FunctionDef {cons("SyncFunction")}
    MetaAnno* "sync" "function" QId "(" {FArg ","}* ")" "{" Statement* "}" -> FunctionDef {cons("SyncFunctionNoReturnType")}

    FunctionDef -> Definition

  context-free syntax %% Statements
    "var" ID ":" Type "=" Exp ";"              -> Statement {cons("VarDecl")}
    "var" ID "=" Exp ";"                       -> Statement {cons("VarDeclInferred")}

    LValue "=" Exp ";"                          -> Statement {cons("Assignment")}
    QId                                         -> LValue
    Exp "." ID                                  -> LValue {cons("LFieldAccess")}
    "(" LValue "," {LValue ","}* ")"            -> LValue {cons("LTuple")}

    Exp ";"                                     -> Statement {cons("ExpStat")}

    "if" "(" Exp ")" "{" Statement* "}" "else" "{" Statement* "}" -> Statement {cons("If")}
    "if" "(" Exp ")" "{" Statement* "}"                           -> Statement {cons("IfNoElse")}
    "for" "(" LValue ":" Type "in" Exp ")" "{" Statement* "}"         -> Statement {cons("For")}
    "for" "(" LValue "in" Exp ")" "{" Statement* "}"                  -> Statement {cons("ForInferred")}

    "return" Exp ";"                            -> Statement {cons("Return")}
    "screen" "return" Exp ";"                   -> Statement {cons("ScreenReturn")}
    "return" ";"                                -> Statement {cons("Return")}
    "screen" "return" ";"                       -> Statement {cons("ScreenReturn")}
    "async" "{" Statement* "}"                  -> Statement {cons("Async")}

  context-free syntax %% Expressions

    STRING                        -> Exp {cons("String")}
    NUMBER                        -> Exp {cons("Num")}
    "true"                        -> Exp {cons("True")}
    "false"                       -> Exp {cons("False")}
    "null"                        -> Exp {cons("Null")}
    QId "(" {NamedExp ","}* ")"   -> Exp {cons("Call")}

    QId                           -> LimitedExp {cons("Var")}
    Exp "." ID "(" {Exp ","}* ")" -> LimitedExp {cons("MethodCall")}
    Exp "." ID                    -> LimitedExp {cons("FieldAccess")}
    Exp "[" Exp "]"               -> LimitedExp {left, cons("Indexer")}
    "(" Exp ")"                   -> LimitedExp {cons("Brackets")}

    LimitedExp                    -> Exp

    Exp                           -> NamedExp
    ID "=" Exp                    -> NamedExp {cons("NamedExp")}

    Exp BoolMethodId Exp         -> Exp {cons("BinMethodCall"), left}
    Exp CompareMethodId Exp      -> Exp {cons("BinMethodCall"), left}
    Exp TermOperatorMethodId Exp -> Exp {cons("BinMethodCall"), left}
    Exp OperatorMethodId Exp     -> Exp {cons("BinMethodCall"), left}

    Exp "?" Exp ":" Exp          -> Exp {left, cons("Choice")}
    QId "<" Type ">" "(" {Exp ","}* ")"      -> Exp {cons("CollectionCons")}
    Type "{" {PropVal ","}* "}"  -> Exp {cons("EntityCons")}

    "[" {Exp ","}* "]"           -> Exp {cons("List")}

    "(" Exp "," {Exp ","}* ")"   -> Exp {cons("Tuple")}

    "{" Statement* "}"             -> Exp {cons("Callback")}
    "template" "{" ScreenElem* "}" -> Exp {cons("AnonymousTemplate")}

    ID "=" Exp                  -> PropVal {cons("PropVal")}

  context-free syntax %% Filters
    "[" Exp Filter "]"                       -> Exp {cons("SetComp")}
    "where" SetExp                           -> Filter {cons("FilterNoOrderByNoLimit")}
    "order" "by" OrderExp                    -> Filter {cons("FilterNoWhereNoLimit")}
    "where" SetExp "order" "by" OrderExp     -> Filter {cons("FilterNoLimit")}
    "where" SetExp Limit                     -> Filter {cons("FilterNoOrderBy")}
    "order" "by" OrderExp Limit              -> Filter {cons("FilterNoWhere")}
    Limit                                    -> Filter {cons("FilterNoWhereNoOrderBy")}
    "where" Exp "order" "by" OrderExp Limit  -> Filter {cons("Filter")}
    Exp                                      -> OrderExp {cons("OrderNonSpecific")}
    Exp "asc"                                -> OrderExp {cons("OrderAscending")}
    Exp "desc"                               -> OrderExp {cons("OrderDescending")}
    "limit" Exp "offset" Exp                 -> Limit {cons("Limit")}
    "limit" Exp                              -> Limit {cons("LimitNoOffset")}
    "offset" Exp                             -> Limit {cons("LimitNoLimit")}

    ID "==" Exp                              -> SetExp {cons("SetEq")}
    ID "!=" Exp                              -> SetExp {cons("SetNotEq")}
    ID "<" Exp                               -> SetExp {cons("SetLt")}
    ID "<=" Exp                              -> SetExp {cons("SetLeq")}
    ID ">" Exp                               -> SetExp {cons("SetGt")}
    ID ">=" Exp                              -> SetExp {cons("SetGeq")}

    SetExp "&&" SetExp                       -> SetExp {left, cons("SetAnd")}


  context-free priorities
    Exp "." ID -> LimitedExp
  > Exp "." ID "(" {Exp ","}* ")" -> LimitedExp
  > Exp TermOperatorMethodId Exp -> Exp
  > Exp OperatorMethodId Exp -> Exp
  > Exp CompareMethodId Exp -> Exp
  > Exp BoolMethodId Exp -> Exp
  > Exp "?" Exp ":" Exp -> Exp


  context-free priorities
  {
    ID "==" Exp                              -> SetExp
    ID "!=" Exp                              -> SetExp
    ID "<" Exp                               -> SetExp
    ID "<=" Exp                              -> SetExp
    ID ">" Exp                               -> SetExp
    ID ">=" Exp                              -> SetExp
  }
  > SetExp "&&" SetExp                       -> SetExp


  lexical syntax
    "||"                     -> BoolMethodId
    "&&"                     -> BoolMethodId
    "=="                     -> CompareMethodId
    "!="                     -> CompareMethodId
    "<"                      -> CompareMethodId
    "<="                     -> CompareMethodId
    ">"                      -> CompareMethodId
    ">="                     -> CompareMethodId
    "*"                      -> TermOperatorMethodId
    "/"                      -> TermOperatorMethodId
    "<<"                     -> TermOperatorMethodId
    ">>"                     -> TermOperatorMethodId
    "&"                      -> TermOperatorMethodId
    "|"                      -> TermOperatorMethodId
    "%"                      -> TermOperatorMethodId
    "+"                      -> OperatorMethodId
    "-"                      -> OperatorMethodId
    "++"                     -> PostFixId
    "--"                     -> PostFixId
    Id                       -> MethodId
    BoolMethodId             -> MethodId
    CompareMethodId          -> MethodId
    TermOperatorMethodId     -> MethodId
    OperatorMethodId         -> MethodId
    PostFixId                -> MethodId
